// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package redpanda.runtime.v1alpha1;

option go_package = "github.com/redpanda-data/connect/v4/internal/rpcplugin/runtimepb";

import "redpanda/runtime/v1alpha1/message.proto";

// BatchOutput is an interface implemented by Benthos outputs that require
// Benthos to batch messages before dispatch in order to improve throughput.
// Each call to WriteBatch should block until either all messages in the batch
// have been successfully or unsuccessfully sent, or the RPC deadline is reached.
//
// Multiple write calls can be performed in parallel, and the constructor of an
// output must provide a MaxInFlight parameter indicating the maximum number of
// parallel batched write calls the output supports.
service BatchOutputService {
  // Init is the first method called for a batch output and it passes the user's
  // configuration to the output.
  //
  // The schema for the output configuration is specified in the `plugin.yaml`
  // file provided to Redpanda Connect.
  rpc Init(BatchOutputInitRequest) returns (BatchOutputInitResponse) {}
  // Establish a connection to the downstream service. Connect will always be
  // called first when a writer is instantiated, and will be continuously
  // called with back off until a nil error is returned.
  //
  // Once Connect returns a nil error the write method will be called until
  // either Error.NotConnected is returned, or the writer is closed.
  rpc Connect(BatchOutputConnectRequest) returns (BatchOutputConnectResponse) {}
  // Write a batch of messages to a sink, or return an error if delivery is
  // not possible.
  //
  // If this method returns Error.NotConnected then write will not be called
  // again until Connect has returned a nil error.
  rpc Send(BatchOutputSendRequest) returns (BatchOutputSendResponse) {}
  // Close the component, blocks until either the underlying resources are
  // cleaned up or the RPC deadline is reached.
  rpc Close(BatchOutputCloseRequest) returns (BatchOutputCloseResponse) {}
}

// BatchPolicy describes the mechanisms by which batching should be performed
// of messages destined for a Batch output.
//
// This is returned by Init RPC of batch outputs.
message BatchPolicy {
  int64 byte_size = 1;
  int64 count = 2;
  string check = 3;
  string period = 4;
}

message BatchOutputInitRequest {
  // The parsed configuration from the user based on the register schema in
  // `plugin.yaml`.
  Value config = 1;
}
message BatchOutputInitResponse {
  // If present, then the input configuration is invalid and an error should be
  // surfaced at pipeline construction time.
  Error error = 1;
  // The maximum number of write calls can be performed in parallel. Must be >
  // 0.
  int32 max_in_flight = 2;
  // The batching policy for messages sent to this output. If omitted
  // then no additional batching will be performed on top of the batches
  // that already exist in the pipeline.
  BatchPolicy batch_policy = 3;
}

message BatchOutputConnectRequest {}
message BatchOutputConnectResponse {
  // If present, then the connect attempt failed.
  Error error = 1;
}

message BatchOutputSendRequest {
  // The batch of messages to send to the output
  MessageBatch batch = 1;
}
message BatchOutputSendResponse {
  // If present, then the send attempt failed.
  Error error = 1;
}

message BatchOutputCloseRequest {}
message BatchOutputCloseResponse {
  // If present, then the close attempt failed.
  Error error = 1;
}
