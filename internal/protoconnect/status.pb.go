// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: status.proto

package protoconnect

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusEvent_Type int32

const (
	// The status has not been specified.
	StatusEvent_TYPE_UNSPECIFIED StatusEvent_Type = 0
	// An instance has parsed a config and is now attempting to run a pipeline.
	StatusEvent_TYPE_INITIALIZING StatusEvent_Type = 1
	// An instance is running and is connected to all inputs and outputs.
	StatusEvent_TYPE_CONNECTION_HEALTHY StatusEvent_Type = 2
	// An instance is running but is not connected to all inputs and outputs.
	StatusEvent_TYPE_CONNECTION_ERROR StatusEvent_Type = 3
	// An instance is in the process of exiting and will no longer sent status events.
	StatusEvent_TYPE_EXITING StatusEvent_Type = 4
)

// Enum value maps for StatusEvent_Type.
var (
	StatusEvent_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_INITIALIZING",
		2: "TYPE_CONNECTION_HEALTHY",
		3: "TYPE_CONNECTION_ERROR",
		4: "TYPE_EXITING",
	}
	StatusEvent_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":        0,
		"TYPE_INITIALIZING":       1,
		"TYPE_CONNECTION_HEALTHY": 2,
		"TYPE_CONNECTION_ERROR":   3,
		"TYPE_EXITING":            4,
	}
)

func (x StatusEvent_Type) Enum() *StatusEvent_Type {
	p := new(StatusEvent_Type)
	*p = x
	return p
}

func (x StatusEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_status_proto_enumTypes[0].Descriptor()
}

func (StatusEvent_Type) Type() protoreflect.EnumType {
	return &file_status_proto_enumTypes[0]
}

func (x StatusEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusEvent_Type.Descriptor instead.
func (StatusEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{2, 0}
}

// ConnectionError describes a specific connection failure.
type ConnectionError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`   // The error message.
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`         // The path of the connector in the config, following the spec outlined in https://docs.redpanda.com/redpanda-connect/configuration/field_paths/
	Label         *string                `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label,omitempty"` // An optional label given to the connector.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionError) Reset() {
	*x = ConnectionError{}
	mi := &file_status_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionError) ProtoMessage() {}

func (x *ConnectionError) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionError.ProtoReflect.Descriptor instead.
func (*ConnectionError) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectionError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConnectionError) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ConnectionError) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

// ExitError describes an error encountered that caused the instance to exit.
type ExitError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // The error message.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExitError) Reset() {
	*x = ExitError{}
	mi := &file_status_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExitError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitError) ProtoMessage() {}

func (x *ExitError) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitError.ProtoReflect.Descriptor instead.
func (*ExitError) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{1}
}

func (x *ExitError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// StatusEvent describes the current state of an individual connect instance,
// which is self-reported periodically.
type StatusEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Type             StatusEvent_Type       `protobuf:"varint,1,opt,name=type,proto3,enum=redpanda.api.connect.v1alpha1.StatusEvent_Type" json:"type,omitempty"` // The type of the event.
	PipelineId       string                 `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`                        // The identifier of the running pipeline.
	InstanceId       string                 `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`                        // The unique identifier of the connect instance.
	Timestamp        int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                           // The time this event was emitted.
	ConnectionErrors []*ConnectionError     `protobuf:"bytes,5,rep,name=connection_errors,json=connectionErrors,proto3" json:"connection_errors,omitempty"`      // Zero or more connection errors.
	ExitError        *ExitError             `protobuf:"bytes,6,opt,name=exit_error,json=exitError,proto3,oneof" json:"exit_error,omitempty"`                     // An optional exit error.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StatusEvent) Reset() {
	*x = StatusEvent{}
	mi := &file_status_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusEvent) ProtoMessage() {}

func (x *StatusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusEvent.ProtoReflect.Descriptor instead.
func (*StatusEvent) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{2}
}

func (x *StatusEvent) GetType() StatusEvent_Type {
	if x != nil {
		return x.Type
	}
	return StatusEvent_TYPE_UNSPECIFIED
}

func (x *StatusEvent) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *StatusEvent) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StatusEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StatusEvent) GetConnectionErrors() []*ConnectionError {
	if x != nil {
		return x.ConnectionErrors
	}
	return nil
}

func (x *StatusEvent) GetExitError() *ExitError {
	if x != nil {
		return x.ExitError
	}
	return nil
}

var File_status_proto protoreflect.FileDescriptor

const file_status_proto_rawDesc = "" +
	"\n" +
	"\fstatus.proto\x12\x1dredpanda.api.connect.v1alpha1\"d\n" +
	"\x0fConnectionError\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x19\n" +
	"\x05label\x18\x03 \x01(\tH\x00R\x05label\x88\x01\x01B\b\n" +
	"\x06_label\"%\n" +
	"\tExitError\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"\xeb\x03\n" +
	"\vStatusEvent\x12C\n" +
	"\x04type\x18\x01 \x01(\x0e2/.redpanda.api.connect.v1alpha1.StatusEvent.TypeR\x04type\x12\x1f\n" +
	"\vpipeline_id\x18\x02 \x01(\tR\n" +
	"pipelineId\x12\x1f\n" +
	"\vinstance_id\x18\x03 \x01(\tR\n" +
	"instanceId\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x12[\n" +
	"\x11connection_errors\x18\x05 \x03(\v2..redpanda.api.connect.v1alpha1.ConnectionErrorR\x10connectionErrors\x12L\n" +
	"\n" +
	"exit_error\x18\x06 \x01(\v2(.redpanda.api.connect.v1alpha1.ExitErrorH\x00R\texitError\x88\x01\x01\"}\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TYPE_INITIALIZING\x10\x01\x12\x1b\n" +
	"\x17TYPE_CONNECTION_HEALTHY\x10\x02\x12\x19\n" +
	"\x15TYPE_CONNECTION_ERROR\x10\x03\x12\x10\n" +
	"\fTYPE_EXITING\x10\x04B\r\n" +
	"\v_exit_errorB\x17Z\x15internal/protoconnectb\x06proto3"

var (
	file_status_proto_rawDescOnce sync.Once
	file_status_proto_rawDescData []byte
)

func file_status_proto_rawDescGZIP() []byte {
	file_status_proto_rawDescOnce.Do(func() {
		file_status_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_status_proto_rawDesc), len(file_status_proto_rawDesc)))
	})
	return file_status_proto_rawDescData
}

var file_status_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_status_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_status_proto_goTypes = []any{
	(StatusEvent_Type)(0),   // 0: redpanda.api.connect.v1alpha1.StatusEvent.Type
	(*ConnectionError)(nil), // 1: redpanda.api.connect.v1alpha1.ConnectionError
	(*ExitError)(nil),       // 2: redpanda.api.connect.v1alpha1.ExitError
	(*StatusEvent)(nil),     // 3: redpanda.api.connect.v1alpha1.StatusEvent
}
var file_status_proto_depIdxs = []int32{
	0, // 0: redpanda.api.connect.v1alpha1.StatusEvent.type:type_name -> redpanda.api.connect.v1alpha1.StatusEvent.Type
	1, // 1: redpanda.api.connect.v1alpha1.StatusEvent.connection_errors:type_name -> redpanda.api.connect.v1alpha1.ConnectionError
	2, // 2: redpanda.api.connect.v1alpha1.StatusEvent.exit_error:type_name -> redpanda.api.connect.v1alpha1.ExitError
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_status_proto_init() }
func file_status_proto_init() {
	if File_status_proto != nil {
		return
	}
	file_status_proto_msgTypes[0].OneofWrappers = []any{}
	file_status_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_status_proto_rawDesc), len(file_status_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_status_proto_goTypes,
		DependencyIndexes: file_status_proto_depIdxs,
		EnumInfos:         file_status_proto_enumTypes,
		MessageInfos:      file_status_proto_msgTypes,
	}.Build()
	File_status_proto = out.File
	file_status_proto_goTypes = nil
	file_status_proto_depIdxs = nil
}
