# Copyright 2024 Redpanda Data, Inc.
#
# Licensed as a Redpanda Enterprise file under the Redpanda Community
# License (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
#
# https://github.com/redpanda-data/connect/blob/main/licenses/rcl.md

name: redpanda_migrator_bundle
type: input
status: experimental
categories: [ Services ]
summary: Redpanda Migrator bundle input
description: |
  All-in-one input which reads messages and schemas from a Kafka or Redpanda cluster. This input is meant to be used
  together with the `redpanda_migrator_bundle` output.

fields:
  - name: redpanda_migrator
    type: unknown
    kind: map
    description: |
      The `redpanda_migrator` input configuration.

  - name: schema_registry
    type: unknown
    kind: map
    description: |
      The `schema_registry` input configuration.

  - name: migrate_schemas_before_data
    type: bool
    kind: scalar
    default: true
    description: |
      Migrate all schemas first before starting to migrate data.

mapping: |
  #!blobl

  let redpandaMigratorOffsets = this.redpanda_migrator.with("seed_brokers", "consumer_group", "client_id", "rack_id", "tls", "sasl").assign({"topics": ["__consumer_offsets"]})

  root = if this.redpanda_migrator.length() == 0 {
    throw("the redpanda_migrator input must be configured")
  } else if this.migrate_schemas_before_data && this.schema_registry.length() > 0 {
    """
      sequence:
        inputs:
          - sequence:
              inputs:
                - schema_registry: %s
                  processors:
                    - mapping: meta input_label = "schema_registry"
                - generate:
                    count: 1
                    mapping: root = ""
                  processors:
                    - log:
                        message: Finished importing schemas
                    - mapping: root = deleted()
          - broker:
              inputs:
                - redpanda_migrator: %s
                  processors:
                    - mapping: meta input_label = "redpanda_migrator"
                - kafka_franz: %s
                  processors:
                    - mapping: meta input_label = "redpanda_migrator_offsets"
    """.format(this.schema_registry.string(), this.redpanda_migrator.string(), $redpandaMigratorOffsets.string()).parse_yaml()
  } else if this.schema_registry.length() > 0 {
    """
      broker:
        inputs:
          - sequence:
              inputs:
                - schema_registry: %s
                  processors:
                    - mapping: meta input_label = "schema_registry"
                - generate:
                    count: 1
                    mapping: root = ""
                  processors:
                    - log:
                        message: Finished importing schemas
                    - mapping: root = deleted()
          - redpanda_migrator: %s
            processors:
              - mapping: meta input_label = "redpanda_migrator"
          - kafka_franz: %s
            processors:
              - mapping: meta input_label = "redpanda_migrator_offsets"
    """.format(this.schema_registry.string(), this.redpanda_migrator.string(), $redpandaMigratorOffsets.string()).parse_yaml()
  } else {
    """
      broker:
        inputs:
          - redpanda_migrator: %s
            processors:
              - mapping: meta input_label = "redpanda_migrator"
          - kafka_franz: %s
            processors:
              - mapping: meta input_label = "redpanda_migrator_offsets"
    """.format(this.redpanda_migrator.string(), $redpandaMigratorOffsets.string()).parse_yaml()
  }

tests:
  - name: Migrate messages, offsets and schemas simultaneously
    config:
      redpanda_migrator:
        seed_brokers: [ "127.0.0.1:9092" ]
        topics: [ "foobar" ]
        consumer_group: "migrator"
      schema_registry:
        url: http://localhost:8081

      migrate_schemas_before_data: false

    expected:
      broker:
        inputs:
          - sequence:
              inputs:
                - processors:
                    - mapping: meta input_label = "schema_registry"
                  schema_registry:
                     url: http://localhost:8081
                - generate:
                    count: 1
                    mapping: root = ""
                  processors:
                    - log:
                        message: Finished importing schemas
                    - mapping: root = deleted()
          - redpanda_migrator:
              seed_brokers: [ "127.0.0.1:9092" ]
              topics: [ "foobar" ]
              consumer_group: "migrator"
            processors:
              - mapping: meta input_label = "redpanda_migrator"
          - kafka_franz:
              seed_brokers: [ "127.0.0.1:9092" ]
              topics: [ "__consumer_offsets" ]
              consumer_group: "migrator"
            processors:
              - mapping: meta input_label = "redpanda_migrator_offsets"

  - name: Migrate schemas first, then messages and offsets
    config:
      redpanda_migrator:
        seed_brokers: [ "127.0.0.1:9092" ]
        topics: [ "foobar" ]
        consumer_group: "migrator"
      schema_registry:
        url: http://localhost:8081

    expected:
      sequence:
        inputs:
          - sequence:
              inputs:
                - processors:
                    - mapping: meta input_label = "schema_registry"
                  schema_registry:
                     url: http://localhost:8081
                - generate:
                    count: 1
                    mapping: root = ""
                  processors:
                    - log:
                        message: Finished importing schemas
                    - mapping: root = deleted()
          - broker:
              inputs:
                - redpanda_migrator:
                    seed_brokers: [ "127.0.0.1:9092" ]
                    topics: [ "foobar" ]
                    consumer_group: "migrator"
                  processors:
                    - mapping: meta input_label = "redpanda_migrator"
                - kafka_franz:
                    seed_brokers: [ "127.0.0.1:9092" ]
                    topics: [ "__consumer_offsets" ]
                    consumer_group: "migrator"
                  processors:
                    - mapping: meta input_label = "redpanda_migrator_offsets"

  - name: Migrate messages and offsets without schemas
    config:
      redpanda_migrator:
        seed_brokers: [ "127.0.0.1:9092" ]
        topics: [ "foobar" ]
        consumer_group: "migrator"

    expected:
      broker:
        inputs:
          - redpanda_migrator:
              seed_brokers: [ "127.0.0.1:9092" ]
              topics: [ "foobar" ]
              consumer_group: "migrator"
            processors:
              - mapping: meta input_label = "redpanda_migrator"
          - kafka_franz:
              seed_brokers: [ "127.0.0.1:9092" ]
              topics: [ "__consumer_offsets" ]
              consumer_group: "migrator"
            processors:
              - mapping: meta input_label = "redpanda_migrator_offsets"
