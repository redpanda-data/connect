// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: redpanda/runtime/v1alpha1/output.proto

package runtimepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BatchOutputService_Init_FullMethodName    = "/redpanda.runtime.v1alpha1.BatchOutputService/Init"
	BatchOutputService_Connect_FullMethodName = "/redpanda.runtime.v1alpha1.BatchOutputService/Connect"
	BatchOutputService_Send_FullMethodName    = "/redpanda.runtime.v1alpha1.BatchOutputService/Send"
	BatchOutputService_Close_FullMethodName   = "/redpanda.runtime.v1alpha1.BatchOutputService/Close"
)

// BatchOutputServiceClient is the client API for BatchOutputService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BatchOutput is an interface implemented by Benthos outputs that require Benthos
// to batch messages before dispatch in order to improve throughput.
// Each call to WriteBatch should block until either all messages in the batch have
// been successfully or unsuccessfully sent, or the context is cancelled.
//
// Multiple write calls can be performed in parallel, and the constructor of an output
// must provide a MaxInFlight parameter indicating the maximum number of parallel batched
// write calls the output supports.
type BatchOutputServiceClient interface {
	// Init is the first method called for a batch output and it passes the user's
	// configuration to the output.
	//
	// The schema for the output configuration is specified in the `plugin.yaml` file
	// provided to Redpanda Connect.
	Init(ctx context.Context, in *BatchOutputInitRequest, opts ...grpc.CallOption) (*BatchOutputInitResponse, error)
	// Establish a connection to the downstream service. Connect will always be
	// called first when a writer is instantiated, and will be continuously
	// called with back off until a nil error is returned.
	//
	// Once Connect returns a nil error the write method will be called until
	// either Error.NotConnected is returned, or the writer is closed.
	Connect(ctx context.Context, in *BatchOutputConnectRequest, opts ...grpc.CallOption) (*BatchOutputConnectResponse, error)
	// Write a batch of messages to a sink, or return an error if delivery is
	// not possible.
	//
	// If this method returns Error.NotConnected then write will not be called
	// again until Connect has returned a nil error.
	Send(ctx context.Context, in *BatchOutputSendRequest, opts ...grpc.CallOption) (*BatchOutputSendResponse, error)
	// Close the component, blocks until either the underlying resources are
	// cleaned up or the context is cancelled. Returns an error if the context
	// is cancelled.
	Close(ctx context.Context, in *BatchOutputCloseRequest, opts ...grpc.CallOption) (*BatchOutputCloseResponse, error)
}

type batchOutputServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchOutputServiceClient(cc grpc.ClientConnInterface) BatchOutputServiceClient {
	return &batchOutputServiceClient{cc}
}

func (c *batchOutputServiceClient) Init(ctx context.Context, in *BatchOutputInitRequest, opts ...grpc.CallOption) (*BatchOutputInitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchOutputInitResponse)
	err := c.cc.Invoke(ctx, BatchOutputService_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchOutputServiceClient) Connect(ctx context.Context, in *BatchOutputConnectRequest, opts ...grpc.CallOption) (*BatchOutputConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchOutputConnectResponse)
	err := c.cc.Invoke(ctx, BatchOutputService_Connect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchOutputServiceClient) Send(ctx context.Context, in *BatchOutputSendRequest, opts ...grpc.CallOption) (*BatchOutputSendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchOutputSendResponse)
	err := c.cc.Invoke(ctx, BatchOutputService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchOutputServiceClient) Close(ctx context.Context, in *BatchOutputCloseRequest, opts ...grpc.CallOption) (*BatchOutputCloseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchOutputCloseResponse)
	err := c.cc.Invoke(ctx, BatchOutputService_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchOutputServiceServer is the server API for BatchOutputService service.
// All implementations must embed UnimplementedBatchOutputServiceServer
// for forward compatibility.
//
// BatchOutput is an interface implemented by Benthos outputs that require Benthos
// to batch messages before dispatch in order to improve throughput.
// Each call to WriteBatch should block until either all messages in the batch have
// been successfully or unsuccessfully sent, or the context is cancelled.
//
// Multiple write calls can be performed in parallel, and the constructor of an output
// must provide a MaxInFlight parameter indicating the maximum number of parallel batched
// write calls the output supports.
type BatchOutputServiceServer interface {
	// Init is the first method called for a batch output and it passes the user's
	// configuration to the output.
	//
	// The schema for the output configuration is specified in the `plugin.yaml` file
	// provided to Redpanda Connect.
	Init(context.Context, *BatchOutputInitRequest) (*BatchOutputInitResponse, error)
	// Establish a connection to the downstream service. Connect will always be
	// called first when a writer is instantiated, and will be continuously
	// called with back off until a nil error is returned.
	//
	// Once Connect returns a nil error the write method will be called until
	// either Error.NotConnected is returned, or the writer is closed.
	Connect(context.Context, *BatchOutputConnectRequest) (*BatchOutputConnectResponse, error)
	// Write a batch of messages to a sink, or return an error if delivery is
	// not possible.
	//
	// If this method returns Error.NotConnected then write will not be called
	// again until Connect has returned a nil error.
	Send(context.Context, *BatchOutputSendRequest) (*BatchOutputSendResponse, error)
	// Close the component, blocks until either the underlying resources are
	// cleaned up or the context is cancelled. Returns an error if the context
	// is cancelled.
	Close(context.Context, *BatchOutputCloseRequest) (*BatchOutputCloseResponse, error)
	mustEmbedUnimplementedBatchOutputServiceServer()
}

// UnimplementedBatchOutputServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBatchOutputServiceServer struct{}

func (UnimplementedBatchOutputServiceServer) Init(context.Context, *BatchOutputInitRequest) (*BatchOutputInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedBatchOutputServiceServer) Connect(context.Context, *BatchOutputConnectRequest) (*BatchOutputConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedBatchOutputServiceServer) Send(context.Context, *BatchOutputSendRequest) (*BatchOutputSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedBatchOutputServiceServer) Close(context.Context, *BatchOutputCloseRequest) (*BatchOutputCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedBatchOutputServiceServer) mustEmbedUnimplementedBatchOutputServiceServer() {}
func (UnimplementedBatchOutputServiceServer) testEmbeddedByValue()                            {}

// UnsafeBatchOutputServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchOutputServiceServer will
// result in compilation errors.
type UnsafeBatchOutputServiceServer interface {
	mustEmbedUnimplementedBatchOutputServiceServer()
}

func RegisterBatchOutputServiceServer(s grpc.ServiceRegistrar, srv BatchOutputServiceServer) {
	// If the following call pancis, it indicates UnimplementedBatchOutputServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BatchOutputService_ServiceDesc, srv)
}

func _BatchOutputService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOutputInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchOutputServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchOutputService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchOutputServiceServer).Init(ctx, req.(*BatchOutputInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchOutputService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOutputConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchOutputServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchOutputService_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchOutputServiceServer).Connect(ctx, req.(*BatchOutputConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchOutputService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOutputSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchOutputServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchOutputService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchOutputServiceServer).Send(ctx, req.(*BatchOutputSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchOutputService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOutputCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchOutputServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchOutputService_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchOutputServiceServer).Close(ctx, req.(*BatchOutputCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BatchOutputService_ServiceDesc is the grpc.ServiceDesc for BatchOutputService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchOutputService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.runtime.v1alpha1.BatchOutputService",
	HandlerType: (*BatchOutputServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _BatchOutputService_Init_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _BatchOutputService_Connect_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _BatchOutputService_Send_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _BatchOutputService_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/runtime/v1alpha1/output.proto",
}
