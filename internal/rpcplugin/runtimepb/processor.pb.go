// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: redpanda/runtime/v1alpha1/processor.proto

package runtimepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchProcessorInitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *Value                 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchProcessorInitRequest) Reset() {
	*x = BatchProcessorInitRequest{}
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchProcessorInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessorInitRequest) ProtoMessage() {}

func (x *BatchProcessorInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessorInitRequest.ProtoReflect.Descriptor instead.
func (*BatchProcessorInitRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_processor_proto_rawDescGZIP(), []int{0}
}

func (x *BatchProcessorInitRequest) GetConfig() *Value {
	if x != nil {
		return x.Config
	}
	return nil
}

type BatchProcessorInitResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present, then the input configuration is invalid and an error should be surfaced
	// at pipeline construction time.
	Error         *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchProcessorInitResponse) Reset() {
	*x = BatchProcessorInitResponse{}
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchProcessorInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessorInitResponse) ProtoMessage() {}

func (x *BatchProcessorInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessorInitResponse.ProtoReflect.Descriptor instead.
func (*BatchProcessorInitResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_processor_proto_rawDescGZIP(), []int{1}
}

func (x *BatchProcessorInitResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BatchProcessorProcessBatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The input batch to the processor.
	Batch         *MessageBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchProcessorProcessBatchRequest) Reset() {
	*x = BatchProcessorProcessBatchRequest{}
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchProcessorProcessBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessorProcessBatchRequest) ProtoMessage() {}

func (x *BatchProcessorProcessBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessorProcessBatchRequest.ProtoReflect.Descriptor instead.
func (*BatchProcessorProcessBatchRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_processor_proto_rawDescGZIP(), []int{2}
}

func (x *BatchProcessorProcessBatchRequest) GetBatch() *MessageBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

type BatchProcessorProcessBatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resulting batch of messages. Returning multiple batches allows
	// for splitting a single batch into multiple batches.
	Batches []*MessageBatch `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
	// If present, then the processing failed.
	Error         *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchProcessorProcessBatchResponse) Reset() {
	*x = BatchProcessorProcessBatchResponse{}
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchProcessorProcessBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessorProcessBatchResponse) ProtoMessage() {}

func (x *BatchProcessorProcessBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessorProcessBatchResponse.ProtoReflect.Descriptor instead.
func (*BatchProcessorProcessBatchResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_processor_proto_rawDescGZIP(), []int{3}
}

func (x *BatchProcessorProcessBatchResponse) GetBatches() []*MessageBatch {
	if x != nil {
		return x.Batches
	}
	return nil
}

func (x *BatchProcessorProcessBatchResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BatchProcessorCloseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchProcessorCloseRequest) Reset() {
	*x = BatchProcessorCloseRequest{}
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchProcessorCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessorCloseRequest) ProtoMessage() {}

func (x *BatchProcessorCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessorCloseRequest.ProtoReflect.Descriptor instead.
func (*BatchProcessorCloseRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_processor_proto_rawDescGZIP(), []int{4}
}

type BatchProcessorCloseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present, then the close attempt failed.
	Error         *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchProcessorCloseResponse) Reset() {
	*x = BatchProcessorCloseResponse{}
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchProcessorCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessorCloseResponse) ProtoMessage() {}

func (x *BatchProcessorCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_processor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessorCloseResponse.ProtoReflect.Descriptor instead.
func (*BatchProcessorCloseResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_processor_proto_rawDescGZIP(), []int{5}
}

func (x *BatchProcessorCloseResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_redpanda_runtime_v1alpha1_processor_proto protoreflect.FileDescriptor

const file_redpanda_runtime_v1alpha1_processor_proto_rawDesc = "" +
	"\n" +
	")redpanda/runtime/v1alpha1/processor.proto\x12\x19redpanda.runtime.v1alpha1\x1a'redpanda/runtime/v1alpha1/message.proto\"U\n" +
	"\x19BatchProcessorInitRequest\x128\n" +
	"\x06config\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ValueR\x06config\"T\n" +
	"\x1aBatchProcessorInitResponse\x126\n" +
	"\x05error\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error\"b\n" +
	"!BatchProcessorProcessBatchRequest\x12=\n" +
	"\x05batch\x18\x01 \x01(\v2'.redpanda.runtime.v1alpha1.MessageBatchR\x05batch\"\x9f\x01\n" +
	"\"BatchProcessorProcessBatchResponse\x12A\n" +
	"\abatches\x18\x01 \x03(\v2'.redpanda.runtime.v1alpha1.MessageBatchR\abatches\x126\n" +
	"\x05error\x18\x02 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error\"\x1c\n" +
	"\x1aBatchProcessorCloseRequest\"U\n" +
	"\x1bBatchProcessorCloseResponse\x126\n" +
	"\x05error\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error2\x98\x03\n" +
	"\x15BatchProcessorService\x12u\n" +
	"\x04Init\x124.redpanda.runtime.v1alpha1.BatchProcessorInitRequest\x1a5.redpanda.runtime.v1alpha1.BatchProcessorInitResponse\"\x00\x12\x8d\x01\n" +
	"\fProcessBatch\x12<.redpanda.runtime.v1alpha1.BatchProcessorProcessBatchRequest\x1a=.redpanda.runtime.v1alpha1.BatchProcessorProcessBatchResponse\"\x00\x12x\n" +
	"\x05Close\x125.redpanda.runtime.v1alpha1.BatchProcessorCloseRequest\x1a6.redpanda.runtime.v1alpha1.BatchProcessorCloseResponse\"\x00BBZ@github.com/redpanda-data/connect/v4/internal/rpcplugin/runtimepbb\x06proto3"

var (
	file_redpanda_runtime_v1alpha1_processor_proto_rawDescOnce sync.Once
	file_redpanda_runtime_v1alpha1_processor_proto_rawDescData []byte
)

func file_redpanda_runtime_v1alpha1_processor_proto_rawDescGZIP() []byte {
	file_redpanda_runtime_v1alpha1_processor_proto_rawDescOnce.Do(func() {
		file_redpanda_runtime_v1alpha1_processor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_redpanda_runtime_v1alpha1_processor_proto_rawDesc), len(file_redpanda_runtime_v1alpha1_processor_proto_rawDesc)))
	})
	return file_redpanda_runtime_v1alpha1_processor_proto_rawDescData
}

var file_redpanda_runtime_v1alpha1_processor_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_redpanda_runtime_v1alpha1_processor_proto_goTypes = []any{
	(*BatchProcessorInitRequest)(nil),          // 0: redpanda.runtime.v1alpha1.BatchProcessorInitRequest
	(*BatchProcessorInitResponse)(nil),         // 1: redpanda.runtime.v1alpha1.BatchProcessorInitResponse
	(*BatchProcessorProcessBatchRequest)(nil),  // 2: redpanda.runtime.v1alpha1.BatchProcessorProcessBatchRequest
	(*BatchProcessorProcessBatchResponse)(nil), // 3: redpanda.runtime.v1alpha1.BatchProcessorProcessBatchResponse
	(*BatchProcessorCloseRequest)(nil),         // 4: redpanda.runtime.v1alpha1.BatchProcessorCloseRequest
	(*BatchProcessorCloseResponse)(nil),        // 5: redpanda.runtime.v1alpha1.BatchProcessorCloseResponse
	(*Value)(nil),                              // 6: redpanda.runtime.v1alpha1.Value
	(*Error)(nil),                              // 7: redpanda.runtime.v1alpha1.Error
	(*MessageBatch)(nil),                       // 8: redpanda.runtime.v1alpha1.MessageBatch
}
var file_redpanda_runtime_v1alpha1_processor_proto_depIdxs = []int32{
	6, // 0: redpanda.runtime.v1alpha1.BatchProcessorInitRequest.config:type_name -> redpanda.runtime.v1alpha1.Value
	7, // 1: redpanda.runtime.v1alpha1.BatchProcessorInitResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	8, // 2: redpanda.runtime.v1alpha1.BatchProcessorProcessBatchRequest.batch:type_name -> redpanda.runtime.v1alpha1.MessageBatch
	8, // 3: redpanda.runtime.v1alpha1.BatchProcessorProcessBatchResponse.batches:type_name -> redpanda.runtime.v1alpha1.MessageBatch
	7, // 4: redpanda.runtime.v1alpha1.BatchProcessorProcessBatchResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	7, // 5: redpanda.runtime.v1alpha1.BatchProcessorCloseResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	0, // 6: redpanda.runtime.v1alpha1.BatchProcessorService.Init:input_type -> redpanda.runtime.v1alpha1.BatchProcessorInitRequest
	2, // 7: redpanda.runtime.v1alpha1.BatchProcessorService.ProcessBatch:input_type -> redpanda.runtime.v1alpha1.BatchProcessorProcessBatchRequest
	4, // 8: redpanda.runtime.v1alpha1.BatchProcessorService.Close:input_type -> redpanda.runtime.v1alpha1.BatchProcessorCloseRequest
	1, // 9: redpanda.runtime.v1alpha1.BatchProcessorService.Init:output_type -> redpanda.runtime.v1alpha1.BatchProcessorInitResponse
	3, // 10: redpanda.runtime.v1alpha1.BatchProcessorService.ProcessBatch:output_type -> redpanda.runtime.v1alpha1.BatchProcessorProcessBatchResponse
	5, // 11: redpanda.runtime.v1alpha1.BatchProcessorService.Close:output_type -> redpanda.runtime.v1alpha1.BatchProcessorCloseResponse
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_redpanda_runtime_v1alpha1_processor_proto_init() }
func file_redpanda_runtime_v1alpha1_processor_proto_init() {
	if File_redpanda_runtime_v1alpha1_processor_proto != nil {
		return
	}
	file_redpanda_runtime_v1alpha1_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_redpanda_runtime_v1alpha1_processor_proto_rawDesc), len(file_redpanda_runtime_v1alpha1_processor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_runtime_v1alpha1_processor_proto_goTypes,
		DependencyIndexes: file_redpanda_runtime_v1alpha1_processor_proto_depIdxs,
		MessageInfos:      file_redpanda_runtime_v1alpha1_processor_proto_msgTypes,
	}.Build()
	File_redpanda_runtime_v1alpha1_processor_proto = out.File
	file_redpanda_runtime_v1alpha1_processor_proto_goTypes = nil
	file_redpanda_runtime_v1alpha1_processor_proto_depIdxs = nil
}
