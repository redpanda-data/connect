// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: redpanda/runtime/v1alpha1/input.proto

package runtimepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchInputInitRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parsed configuration from the user based on the register schema in `plugin.yaml`.
	Config        *Value `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchInputInitRequest) Reset() {
	*x = BatchInputInitRequest{}
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInputInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInputInitRequest) ProtoMessage() {}

func (x *BatchInputInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInputInitRequest.ProtoReflect.Descriptor instead.
func (*BatchInputInitRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_input_proto_rawDescGZIP(), []int{0}
}

func (x *BatchInputInitRequest) GetConfig() *Value {
	if x != nil {
		return x.Config
	}
	return nil
}

type BatchInputInitResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present, then the input configuration is invalid and an error should be surfaced
	// at pipeline construction time.
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// If true, then any nacks are automatically retried. This is useful for
	// inputs that don't have a mechanism for dealing with nacks, and want to
	// just automatically retry them until they succeed.
	AutoReplayNacks bool `protobuf:"varint,2,opt,name=auto_replay_nacks,json=autoReplayNacks,proto3" json:"auto_replay_nacks,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BatchInputInitResponse) Reset() {
	*x = BatchInputInitResponse{}
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInputInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInputInitResponse) ProtoMessage() {}

func (x *BatchInputInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInputInitResponse.ProtoReflect.Descriptor instead.
func (*BatchInputInitResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_input_proto_rawDescGZIP(), []int{1}
}

func (x *BatchInputInitResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BatchInputInitResponse) GetAutoReplayNacks() bool {
	if x != nil {
		return x.AutoReplayNacks
	}
	return false
}

type BatchInputConnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchInputConnectRequest) Reset() {
	*x = BatchInputConnectRequest{}
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInputConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInputConnectRequest) ProtoMessage() {}

func (x *BatchInputConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInputConnectRequest.ProtoReflect.Descriptor instead.
func (*BatchInputConnectRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_input_proto_rawDescGZIP(), []int{2}
}

type BatchInputConnectResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present, then the connect attempt failed.
	Error         *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchInputConnectResponse) Reset() {
	*x = BatchInputConnectResponse{}
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInputConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInputConnectResponse) ProtoMessage() {}

func (x *BatchInputConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInputConnectResponse.ProtoReflect.Descriptor instead.
func (*BatchInputConnectResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_input_proto_rawDescGZIP(), []int{3}
}

func (x *BatchInputConnectResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BatchInputReadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchInputReadRequest) Reset() {
	*x = BatchInputReadRequest{}
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInputReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInputReadRequest) ProtoMessage() {}

func (x *BatchInputReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInputReadRequest.ProtoReflect.Descriptor instead.
func (*BatchInputReadRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_input_proto_rawDescGZIP(), []int{4}
}

type BatchInputReadResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the batch, which is used in the ack request to identify the batch used.
	// These IDs are opaque to the connect framework but IDs should be unique per process.
	BatchId uint64 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// The batch of messages to be processed.
	Batch *MessageBatch `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`
	// If present, then there was an error reading messages.
	Error         *Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchInputReadResponse) Reset() {
	*x = BatchInputReadResponse{}
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInputReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInputReadResponse) ProtoMessage() {}

func (x *BatchInputReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInputReadResponse.ProtoReflect.Descriptor instead.
func (*BatchInputReadResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_input_proto_rawDescGZIP(), []int{5}
}

func (x *BatchInputReadResponse) GetBatchId() uint64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *BatchInputReadResponse) GetBatch() *MessageBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *BatchInputReadResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BatchInputAckRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the batch.
	BatchId uint64 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// If present, then this is a nack request.
	// If auto_replay_nacks is enabled in the InitResponse, then this should never be present.
	Error         *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchInputAckRequest) Reset() {
	*x = BatchInputAckRequest{}
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInputAckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInputAckRequest) ProtoMessage() {}

func (x *BatchInputAckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInputAckRequest.ProtoReflect.Descriptor instead.
func (*BatchInputAckRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_input_proto_rawDescGZIP(), []int{6}
}

func (x *BatchInputAckRequest) GetBatchId() uint64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *BatchInputAckRequest) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BatchInputAckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present, then this ack/nack request failed.
	Error         *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchInputAckResponse) Reset() {
	*x = BatchInputAckResponse{}
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInputAckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInputAckResponse) ProtoMessage() {}

func (x *BatchInputAckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInputAckResponse.ProtoReflect.Descriptor instead.
func (*BatchInputAckResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_input_proto_rawDescGZIP(), []int{7}
}

func (x *BatchInputAckResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BatchInputCloseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchInputCloseRequest) Reset() {
	*x = BatchInputCloseRequest{}
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInputCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInputCloseRequest) ProtoMessage() {}

func (x *BatchInputCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInputCloseRequest.ProtoReflect.Descriptor instead.
func (*BatchInputCloseRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_input_proto_rawDescGZIP(), []int{8}
}

type BatchInputCloseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present, then the close attempt failed.
	Error         *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchInputCloseResponse) Reset() {
	*x = BatchInputCloseResponse{}
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInputCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInputCloseResponse) ProtoMessage() {}

func (x *BatchInputCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_input_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInputCloseResponse.ProtoReflect.Descriptor instead.
func (*BatchInputCloseResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_input_proto_rawDescGZIP(), []int{9}
}

func (x *BatchInputCloseResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_redpanda_runtime_v1alpha1_input_proto protoreflect.FileDescriptor

const file_redpanda_runtime_v1alpha1_input_proto_rawDesc = "" +
	"\n" +
	"%redpanda/runtime/v1alpha1/input.proto\x12\x19redpanda.runtime.v1alpha1\x1a'redpanda/runtime/v1alpha1/message.proto\"Q\n" +
	"\x15BatchInputInitRequest\x128\n" +
	"\x06config\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ValueR\x06config\"|\n" +
	"\x16BatchInputInitResponse\x126\n" +
	"\x05error\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error\x12*\n" +
	"\x11auto_replay_nacks\x18\x02 \x01(\bR\x0fautoReplayNacks\"\x1a\n" +
	"\x18BatchInputConnectRequest\"S\n" +
	"\x19BatchInputConnectResponse\x126\n" +
	"\x05error\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error\"\x17\n" +
	"\x15BatchInputReadRequest\"\xaa\x01\n" +
	"\x16BatchInputReadResponse\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\x04R\abatchId\x12=\n" +
	"\x05batch\x18\x02 \x01(\v2'.redpanda.runtime.v1alpha1.MessageBatchR\x05batch\x126\n" +
	"\x05error\x18\x03 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error\"i\n" +
	"\x14BatchInputAckRequest\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\x04R\abatchId\x126\n" +
	"\x05error\x18\x02 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error\"O\n" +
	"\x15BatchInputAckResponse\x126\n" +
	"\x05error\x18\x02 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error\"\x18\n" +
	"\x16BatchInputCloseRequest\"Q\n" +
	"\x17BatchInputCloseResponse\x126\n" +
	"\x05error\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error2\xc2\x04\n" +
	"\x11BatchInputService\x12k\n" +
	"\x04Init\x120.redpanda.runtime.v1alpha1.BatchInputInitRequest\x1a1.redpanda.runtime.v1alpha1.BatchInputInitResponse\x12t\n" +
	"\aConnect\x123.redpanda.runtime.v1alpha1.BatchInputConnectRequest\x1a4.redpanda.runtime.v1alpha1.BatchInputConnectResponse\x12p\n" +
	"\tReadBatch\x120.redpanda.runtime.v1alpha1.BatchInputReadRequest\x1a1.redpanda.runtime.v1alpha1.BatchInputReadResponse\x12h\n" +
	"\x03Ack\x12/.redpanda.runtime.v1alpha1.BatchInputAckRequest\x1a0.redpanda.runtime.v1alpha1.BatchInputAckResponse\x12n\n" +
	"\x05Close\x121.redpanda.runtime.v1alpha1.BatchInputCloseRequest\x1a2.redpanda.runtime.v1alpha1.BatchInputCloseResponseBBZ@github.com/redpanda-data/connect/v4/internal/rpcplugin/runtimepbb\x06proto3"

var (
	file_redpanda_runtime_v1alpha1_input_proto_rawDescOnce sync.Once
	file_redpanda_runtime_v1alpha1_input_proto_rawDescData []byte
)

func file_redpanda_runtime_v1alpha1_input_proto_rawDescGZIP() []byte {
	file_redpanda_runtime_v1alpha1_input_proto_rawDescOnce.Do(func() {
		file_redpanda_runtime_v1alpha1_input_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_redpanda_runtime_v1alpha1_input_proto_rawDesc), len(file_redpanda_runtime_v1alpha1_input_proto_rawDesc)))
	})
	return file_redpanda_runtime_v1alpha1_input_proto_rawDescData
}

var file_redpanda_runtime_v1alpha1_input_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_redpanda_runtime_v1alpha1_input_proto_goTypes = []any{
	(*BatchInputInitRequest)(nil),     // 0: redpanda.runtime.v1alpha1.BatchInputInitRequest
	(*BatchInputInitResponse)(nil),    // 1: redpanda.runtime.v1alpha1.BatchInputInitResponse
	(*BatchInputConnectRequest)(nil),  // 2: redpanda.runtime.v1alpha1.BatchInputConnectRequest
	(*BatchInputConnectResponse)(nil), // 3: redpanda.runtime.v1alpha1.BatchInputConnectResponse
	(*BatchInputReadRequest)(nil),     // 4: redpanda.runtime.v1alpha1.BatchInputReadRequest
	(*BatchInputReadResponse)(nil),    // 5: redpanda.runtime.v1alpha1.BatchInputReadResponse
	(*BatchInputAckRequest)(nil),      // 6: redpanda.runtime.v1alpha1.BatchInputAckRequest
	(*BatchInputAckResponse)(nil),     // 7: redpanda.runtime.v1alpha1.BatchInputAckResponse
	(*BatchInputCloseRequest)(nil),    // 8: redpanda.runtime.v1alpha1.BatchInputCloseRequest
	(*BatchInputCloseResponse)(nil),   // 9: redpanda.runtime.v1alpha1.BatchInputCloseResponse
	(*Value)(nil),                     // 10: redpanda.runtime.v1alpha1.Value
	(*Error)(nil),                     // 11: redpanda.runtime.v1alpha1.Error
	(*MessageBatch)(nil),              // 12: redpanda.runtime.v1alpha1.MessageBatch
}
var file_redpanda_runtime_v1alpha1_input_proto_depIdxs = []int32{
	10, // 0: redpanda.runtime.v1alpha1.BatchInputInitRequest.config:type_name -> redpanda.runtime.v1alpha1.Value
	11, // 1: redpanda.runtime.v1alpha1.BatchInputInitResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	11, // 2: redpanda.runtime.v1alpha1.BatchInputConnectResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	12, // 3: redpanda.runtime.v1alpha1.BatchInputReadResponse.batch:type_name -> redpanda.runtime.v1alpha1.MessageBatch
	11, // 4: redpanda.runtime.v1alpha1.BatchInputReadResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	11, // 5: redpanda.runtime.v1alpha1.BatchInputAckRequest.error:type_name -> redpanda.runtime.v1alpha1.Error
	11, // 6: redpanda.runtime.v1alpha1.BatchInputAckResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	11, // 7: redpanda.runtime.v1alpha1.BatchInputCloseResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	0,  // 8: redpanda.runtime.v1alpha1.BatchInputService.Init:input_type -> redpanda.runtime.v1alpha1.BatchInputInitRequest
	2,  // 9: redpanda.runtime.v1alpha1.BatchInputService.Connect:input_type -> redpanda.runtime.v1alpha1.BatchInputConnectRequest
	4,  // 10: redpanda.runtime.v1alpha1.BatchInputService.ReadBatch:input_type -> redpanda.runtime.v1alpha1.BatchInputReadRequest
	6,  // 11: redpanda.runtime.v1alpha1.BatchInputService.Ack:input_type -> redpanda.runtime.v1alpha1.BatchInputAckRequest
	8,  // 12: redpanda.runtime.v1alpha1.BatchInputService.Close:input_type -> redpanda.runtime.v1alpha1.BatchInputCloseRequest
	1,  // 13: redpanda.runtime.v1alpha1.BatchInputService.Init:output_type -> redpanda.runtime.v1alpha1.BatchInputInitResponse
	3,  // 14: redpanda.runtime.v1alpha1.BatchInputService.Connect:output_type -> redpanda.runtime.v1alpha1.BatchInputConnectResponse
	5,  // 15: redpanda.runtime.v1alpha1.BatchInputService.ReadBatch:output_type -> redpanda.runtime.v1alpha1.BatchInputReadResponse
	7,  // 16: redpanda.runtime.v1alpha1.BatchInputService.Ack:output_type -> redpanda.runtime.v1alpha1.BatchInputAckResponse
	9,  // 17: redpanda.runtime.v1alpha1.BatchInputService.Close:output_type -> redpanda.runtime.v1alpha1.BatchInputCloseResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_redpanda_runtime_v1alpha1_input_proto_init() }
func file_redpanda_runtime_v1alpha1_input_proto_init() {
	if File_redpanda_runtime_v1alpha1_input_proto != nil {
		return
	}
	file_redpanda_runtime_v1alpha1_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_redpanda_runtime_v1alpha1_input_proto_rawDesc), len(file_redpanda_runtime_v1alpha1_input_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_runtime_v1alpha1_input_proto_goTypes,
		DependencyIndexes: file_redpanda_runtime_v1alpha1_input_proto_depIdxs,
		MessageInfos:      file_redpanda_runtime_v1alpha1_input_proto_msgTypes,
	}.Build()
	File_redpanda_runtime_v1alpha1_input_proto = out.File
	file_redpanda_runtime_v1alpha1_input_proto_goTypes = nil
	file_redpanda_runtime_v1alpha1_input_proto_depIdxs = nil
}
