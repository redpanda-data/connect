// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: redpanda/runtime/v1alpha1/output.proto

package runtimepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BatchPolicy describes the mechanisms by which batching should be performed
// of messages destined for a Batch output.
//
// This is returned by Init RPC of batch outputs.
type BatchPolicy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ByteSize      int64                  `protobuf:"varint,1,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	Count         int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Check         string                 `protobuf:"bytes,3,opt,name=check,proto3" json:"check,omitempty"`
	Period        string                 `protobuf:"bytes,4,opt,name=period,proto3" json:"period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchPolicy) Reset() {
	*x = BatchPolicy{}
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPolicy) ProtoMessage() {}

func (x *BatchPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPolicy.ProtoReflect.Descriptor instead.
func (*BatchPolicy) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_output_proto_rawDescGZIP(), []int{0}
}

func (x *BatchPolicy) GetByteSize() int64 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

func (x *BatchPolicy) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BatchPolicy) GetCheck() string {
	if x != nil {
		return x.Check
	}
	return ""
}

func (x *BatchPolicy) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type BatchOutputInitRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parsed configuration from the user based on the register schema in `plugin.yaml`.
	Config        *Value `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOutputInitRequest) Reset() {
	*x = BatchOutputInitRequest{}
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOutputInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOutputInitRequest) ProtoMessage() {}

func (x *BatchOutputInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOutputInitRequest.ProtoReflect.Descriptor instead.
func (*BatchOutputInitRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_output_proto_rawDescGZIP(), []int{1}
}

func (x *BatchOutputInitRequest) GetConfig() *Value {
	if x != nil {
		return x.Config
	}
	return nil
}

type BatchOutputInitResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present, then the input configuration is invalid and an error should be surfaced
	// at pipeline construction time.
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// The maximum number of write calls can be performed in parallel. Must be > 0.
	MaxInFlight int32 `protobuf:"varint,2,opt,name=max_in_flight,json=maxInFlight,proto3" json:"max_in_flight,omitempty"`
	// The batching policy for messages sent to this output. If omitted
	// then no additional batching will be performed on top of the batches
	// that already exist in the pipeline.
	BatchPolicy   *BatchPolicy `protobuf:"bytes,3,opt,name=batch_policy,json=batchPolicy,proto3" json:"batch_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOutputInitResponse) Reset() {
	*x = BatchOutputInitResponse{}
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOutputInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOutputInitResponse) ProtoMessage() {}

func (x *BatchOutputInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOutputInitResponse.ProtoReflect.Descriptor instead.
func (*BatchOutputInitResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_output_proto_rawDescGZIP(), []int{2}
}

func (x *BatchOutputInitResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BatchOutputInitResponse) GetMaxInFlight() int32 {
	if x != nil {
		return x.MaxInFlight
	}
	return 0
}

func (x *BatchOutputInitResponse) GetBatchPolicy() *BatchPolicy {
	if x != nil {
		return x.BatchPolicy
	}
	return nil
}

type BatchOutputConnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOutputConnectRequest) Reset() {
	*x = BatchOutputConnectRequest{}
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOutputConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOutputConnectRequest) ProtoMessage() {}

func (x *BatchOutputConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOutputConnectRequest.ProtoReflect.Descriptor instead.
func (*BatchOutputConnectRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_output_proto_rawDescGZIP(), []int{3}
}

type BatchOutputConnectResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present, then the connect attempt failed.
	Error         *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOutputConnectResponse) Reset() {
	*x = BatchOutputConnectResponse{}
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOutputConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOutputConnectResponse) ProtoMessage() {}

func (x *BatchOutputConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOutputConnectResponse.ProtoReflect.Descriptor instead.
func (*BatchOutputConnectResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_output_proto_rawDescGZIP(), []int{4}
}

func (x *BatchOutputConnectResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BatchOutputSendRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The batch of messages to send to the output
	Batch         *MessageBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOutputSendRequest) Reset() {
	*x = BatchOutputSendRequest{}
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOutputSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOutputSendRequest) ProtoMessage() {}

func (x *BatchOutputSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOutputSendRequest.ProtoReflect.Descriptor instead.
func (*BatchOutputSendRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_output_proto_rawDescGZIP(), []int{5}
}

func (x *BatchOutputSendRequest) GetBatch() *MessageBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

type BatchOutputSendResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present, then the send attempt failed.
	Error         *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOutputSendResponse) Reset() {
	*x = BatchOutputSendResponse{}
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOutputSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOutputSendResponse) ProtoMessage() {}

func (x *BatchOutputSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOutputSendResponse.ProtoReflect.Descriptor instead.
func (*BatchOutputSendResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_output_proto_rawDescGZIP(), []int{6}
}

func (x *BatchOutputSendResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BatchOutputCloseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOutputCloseRequest) Reset() {
	*x = BatchOutputCloseRequest{}
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOutputCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOutputCloseRequest) ProtoMessage() {}

func (x *BatchOutputCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOutputCloseRequest.ProtoReflect.Descriptor instead.
func (*BatchOutputCloseRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_output_proto_rawDescGZIP(), []int{7}
}

type BatchOutputCloseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present, then the close attempt failed.
	Error         *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOutputCloseResponse) Reset() {
	*x = BatchOutputCloseResponse{}
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOutputCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOutputCloseResponse) ProtoMessage() {}

func (x *BatchOutputCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_runtime_v1alpha1_output_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOutputCloseResponse.ProtoReflect.Descriptor instead.
func (*BatchOutputCloseResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_runtime_v1alpha1_output_proto_rawDescGZIP(), []int{8}
}

func (x *BatchOutputCloseResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_redpanda_runtime_v1alpha1_output_proto protoreflect.FileDescriptor

const file_redpanda_runtime_v1alpha1_output_proto_rawDesc = "" +
	"\n" +
	"&redpanda/runtime/v1alpha1/output.proto\x12\x19redpanda.runtime.v1alpha1\x1a'redpanda/runtime/v1alpha1/message.proto\"n\n" +
	"\vBatchPolicy\x12\x1b\n" +
	"\tbyte_size\x18\x01 \x01(\x03R\bbyteSize\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x03R\x05count\x12\x14\n" +
	"\x05check\x18\x03 \x01(\tR\x05check\x12\x16\n" +
	"\x06period\x18\x04 \x01(\tR\x06period\"R\n" +
	"\x16BatchOutputInitRequest\x128\n" +
	"\x06config\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ValueR\x06config\"\xc0\x01\n" +
	"\x17BatchOutputInitResponse\x126\n" +
	"\x05error\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error\x12\"\n" +
	"\rmax_in_flight\x18\x02 \x01(\x05R\vmaxInFlight\x12I\n" +
	"\fbatch_policy\x18\x03 \x01(\v2&.redpanda.runtime.v1alpha1.BatchPolicyR\vbatchPolicy\"\x1b\n" +
	"\x19BatchOutputConnectRequest\"T\n" +
	"\x1aBatchOutputConnectResponse\x126\n" +
	"\x05error\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error\"W\n" +
	"\x16BatchOutputSendRequest\x12=\n" +
	"\x05batch\x18\x01 \x01(\v2'.redpanda.runtime.v1alpha1.MessageBatchR\x05batch\"Q\n" +
	"\x17BatchOutputSendResponse\x126\n" +
	"\x05error\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error\"\x19\n" +
	"\x17BatchOutputCloseRequest\"R\n" +
	"\x18BatchOutputCloseResponse\x126\n" +
	"\x05error\x18\x01 \x01(\v2 .redpanda.runtime.v1alpha1.ErrorR\x05error2\xe4\x03\n" +
	"\x12BatchOutputService\x12o\n" +
	"\x04Init\x121.redpanda.runtime.v1alpha1.BatchOutputInitRequest\x1a2.redpanda.runtime.v1alpha1.BatchOutputInitResponse\"\x00\x12x\n" +
	"\aConnect\x124.redpanda.runtime.v1alpha1.BatchOutputConnectRequest\x1a5.redpanda.runtime.v1alpha1.BatchOutputConnectResponse\"\x00\x12o\n" +
	"\x04Send\x121.redpanda.runtime.v1alpha1.BatchOutputSendRequest\x1a2.redpanda.runtime.v1alpha1.BatchOutputSendResponse\"\x00\x12r\n" +
	"\x05Close\x122.redpanda.runtime.v1alpha1.BatchOutputCloseRequest\x1a3.redpanda.runtime.v1alpha1.BatchOutputCloseResponse\"\x00BBZ@github.com/redpanda-data/connect/v4/internal/rpcplugin/runtimepbb\x06proto3"

var (
	file_redpanda_runtime_v1alpha1_output_proto_rawDescOnce sync.Once
	file_redpanda_runtime_v1alpha1_output_proto_rawDescData []byte
)

func file_redpanda_runtime_v1alpha1_output_proto_rawDescGZIP() []byte {
	file_redpanda_runtime_v1alpha1_output_proto_rawDescOnce.Do(func() {
		file_redpanda_runtime_v1alpha1_output_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_redpanda_runtime_v1alpha1_output_proto_rawDesc), len(file_redpanda_runtime_v1alpha1_output_proto_rawDesc)))
	})
	return file_redpanda_runtime_v1alpha1_output_proto_rawDescData
}

var file_redpanda_runtime_v1alpha1_output_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_redpanda_runtime_v1alpha1_output_proto_goTypes = []any{
	(*BatchPolicy)(nil),                // 0: redpanda.runtime.v1alpha1.BatchPolicy
	(*BatchOutputInitRequest)(nil),     // 1: redpanda.runtime.v1alpha1.BatchOutputInitRequest
	(*BatchOutputInitResponse)(nil),    // 2: redpanda.runtime.v1alpha1.BatchOutputInitResponse
	(*BatchOutputConnectRequest)(nil),  // 3: redpanda.runtime.v1alpha1.BatchOutputConnectRequest
	(*BatchOutputConnectResponse)(nil), // 4: redpanda.runtime.v1alpha1.BatchOutputConnectResponse
	(*BatchOutputSendRequest)(nil),     // 5: redpanda.runtime.v1alpha1.BatchOutputSendRequest
	(*BatchOutputSendResponse)(nil),    // 6: redpanda.runtime.v1alpha1.BatchOutputSendResponse
	(*BatchOutputCloseRequest)(nil),    // 7: redpanda.runtime.v1alpha1.BatchOutputCloseRequest
	(*BatchOutputCloseResponse)(nil),   // 8: redpanda.runtime.v1alpha1.BatchOutputCloseResponse
	(*Value)(nil),                      // 9: redpanda.runtime.v1alpha1.Value
	(*Error)(nil),                      // 10: redpanda.runtime.v1alpha1.Error
	(*MessageBatch)(nil),               // 11: redpanda.runtime.v1alpha1.MessageBatch
}
var file_redpanda_runtime_v1alpha1_output_proto_depIdxs = []int32{
	9,  // 0: redpanda.runtime.v1alpha1.BatchOutputInitRequest.config:type_name -> redpanda.runtime.v1alpha1.Value
	10, // 1: redpanda.runtime.v1alpha1.BatchOutputInitResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	0,  // 2: redpanda.runtime.v1alpha1.BatchOutputInitResponse.batch_policy:type_name -> redpanda.runtime.v1alpha1.BatchPolicy
	10, // 3: redpanda.runtime.v1alpha1.BatchOutputConnectResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	11, // 4: redpanda.runtime.v1alpha1.BatchOutputSendRequest.batch:type_name -> redpanda.runtime.v1alpha1.MessageBatch
	10, // 5: redpanda.runtime.v1alpha1.BatchOutputSendResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	10, // 6: redpanda.runtime.v1alpha1.BatchOutputCloseResponse.error:type_name -> redpanda.runtime.v1alpha1.Error
	1,  // 7: redpanda.runtime.v1alpha1.BatchOutputService.Init:input_type -> redpanda.runtime.v1alpha1.BatchOutputInitRequest
	3,  // 8: redpanda.runtime.v1alpha1.BatchOutputService.Connect:input_type -> redpanda.runtime.v1alpha1.BatchOutputConnectRequest
	5,  // 9: redpanda.runtime.v1alpha1.BatchOutputService.Send:input_type -> redpanda.runtime.v1alpha1.BatchOutputSendRequest
	7,  // 10: redpanda.runtime.v1alpha1.BatchOutputService.Close:input_type -> redpanda.runtime.v1alpha1.BatchOutputCloseRequest
	2,  // 11: redpanda.runtime.v1alpha1.BatchOutputService.Init:output_type -> redpanda.runtime.v1alpha1.BatchOutputInitResponse
	4,  // 12: redpanda.runtime.v1alpha1.BatchOutputService.Connect:output_type -> redpanda.runtime.v1alpha1.BatchOutputConnectResponse
	6,  // 13: redpanda.runtime.v1alpha1.BatchOutputService.Send:output_type -> redpanda.runtime.v1alpha1.BatchOutputSendResponse
	8,  // 14: redpanda.runtime.v1alpha1.BatchOutputService.Close:output_type -> redpanda.runtime.v1alpha1.BatchOutputCloseResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_redpanda_runtime_v1alpha1_output_proto_init() }
func file_redpanda_runtime_v1alpha1_output_proto_init() {
	if File_redpanda_runtime_v1alpha1_output_proto != nil {
		return
	}
	file_redpanda_runtime_v1alpha1_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_redpanda_runtime_v1alpha1_output_proto_rawDesc), len(file_redpanda_runtime_v1alpha1_output_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_runtime_v1alpha1_output_proto_goTypes,
		DependencyIndexes: file_redpanda_runtime_v1alpha1_output_proto_depIdxs,
		MessageInfos:      file_redpanda_runtime_v1alpha1_output_proto_msgTypes,
	}.Build()
	File_redpanda_runtime_v1alpha1_output_proto = out.File
	file_redpanda_runtime_v1alpha1_output_proto_goTypes = nil
	file_redpanda_runtime_v1alpha1_output_proto_depIdxs = nil
}
