// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: redpanda/runtime/v1alpha1/input.proto

package runtimepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BatchInputService_Init_FullMethodName      = "/redpanda.runtime.v1alpha1.BatchInputService/Init"
	BatchInputService_Connect_FullMethodName   = "/redpanda.runtime.v1alpha1.BatchInputService/Connect"
	BatchInputService_ReadBatch_FullMethodName = "/redpanda.runtime.v1alpha1.BatchInputService/ReadBatch"
	BatchInputService_Ack_FullMethodName       = "/redpanda.runtime.v1alpha1.BatchInputService/Ack"
	BatchInputService_Close_FullMethodName     = "/redpanda.runtime.v1alpha1.BatchInputService/Close"
)

// BatchInputServiceClient is the client API for BatchInputService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BatchInput is an interface implemented by Benthos inputs that produce messages
// in batches, where there is a desire to process and send the batch as a logical
// group rather than as individual messages.
//
// Calls to ReadBatch should block until either a message batch is ready to process,
// the connection is lost, or the provided context is cancelled.
type BatchInputServiceClient interface {
	// Init is the first method called for a batch input and it passes the user's
	// configuration to the input.
	//
	// The schema for the input configuration is specified in the `plugin.yaml` file
	// provided to Redpanda Connect.
	Init(ctx context.Context, in *BatchInputInitRequest, opts ...grpc.CallOption) (*BatchInputInitResponse, error)
	// Establish a connection to the upstream service. Connect will always be
	// called first when a reader is instantiated, and will be continuously
	// called with back off until a nil error is returned.
	//
	// The provided context remains open only for the duration of the connecting
	// phase, and should not be used to establish the lifetime of the connection
	// itself.
	//
	// Once Connect returns a nil error the Read method will be called until
	// either ErrNotConnected is returned, or the reader is closed.
	Connect(ctx context.Context, in *BatchInputConnectRequest, opts ...grpc.CallOption) (*BatchInputConnectResponse, error)
	// Read a message batch from a source, along with a function to be called
	// once the entire batch can be either acked (successfully sent or
	// intentionally filtered) or nacked (failed to be processed or dispatched
	// to the output).
	//
	// The Ack will be called for every message batch at least once, but
	// there are no guarantees as to when this will occur. If your input
	// implementation doesn't have a specific mechanism for dealing with a nack
	// then you can instruct the Connect framework to auto_replay_nacks in the
	// InitResponse to get automatic retries.
	//
	// If this method returns Error.NotConnected then ReadBatch will not be called
	// again until Connect has returned a nil error. If Error.EndOfInput is
	// returned then Read will no longer be called and the pipeline will
	// gracefully terminate.
	ReadBatch(ctx context.Context, in *BatchInputReadRequest, opts ...grpc.CallOption) (*BatchInputReadResponse, error)
	// Acknowledge a message batch. This function ensures that the source of the
	// message receives either an acknowledgement (error is missing) or an error that
	// can either be propagated upstream as a nack, or trigger a reattempt at
	// delivering the same message.
	//
	// If your input implementation doesn't have a specific mechanism for dealing with
	// a nack then you can wrap your input implementation with AutoRetryNacks to get
	// automatic retries, and noop this function.
	Ack(ctx context.Context, in *BatchInputAckRequest, opts ...grpc.CallOption) (*BatchInputAckResponse, error)
	// Close the component, blocks until either the underlying resources are
	// cleaned up or the context is cancelled. Returns an error if the context
	// is cancelled.
	Close(ctx context.Context, in *BatchInputCloseRequest, opts ...grpc.CallOption) (*BatchInputCloseResponse, error)
}

type batchInputServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchInputServiceClient(cc grpc.ClientConnInterface) BatchInputServiceClient {
	return &batchInputServiceClient{cc}
}

func (c *batchInputServiceClient) Init(ctx context.Context, in *BatchInputInitRequest, opts ...grpc.CallOption) (*BatchInputInitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchInputInitResponse)
	err := c.cc.Invoke(ctx, BatchInputService_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchInputServiceClient) Connect(ctx context.Context, in *BatchInputConnectRequest, opts ...grpc.CallOption) (*BatchInputConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchInputConnectResponse)
	err := c.cc.Invoke(ctx, BatchInputService_Connect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchInputServiceClient) ReadBatch(ctx context.Context, in *BatchInputReadRequest, opts ...grpc.CallOption) (*BatchInputReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchInputReadResponse)
	err := c.cc.Invoke(ctx, BatchInputService_ReadBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchInputServiceClient) Ack(ctx context.Context, in *BatchInputAckRequest, opts ...grpc.CallOption) (*BatchInputAckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchInputAckResponse)
	err := c.cc.Invoke(ctx, BatchInputService_Ack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchInputServiceClient) Close(ctx context.Context, in *BatchInputCloseRequest, opts ...grpc.CallOption) (*BatchInputCloseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchInputCloseResponse)
	err := c.cc.Invoke(ctx, BatchInputService_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchInputServiceServer is the server API for BatchInputService service.
// All implementations must embed UnimplementedBatchInputServiceServer
// for forward compatibility.
//
// BatchInput is an interface implemented by Benthos inputs that produce messages
// in batches, where there is a desire to process and send the batch as a logical
// group rather than as individual messages.
//
// Calls to ReadBatch should block until either a message batch is ready to process,
// the connection is lost, or the provided context is cancelled.
type BatchInputServiceServer interface {
	// Init is the first method called for a batch input and it passes the user's
	// configuration to the input.
	//
	// The schema for the input configuration is specified in the `plugin.yaml` file
	// provided to Redpanda Connect.
	Init(context.Context, *BatchInputInitRequest) (*BatchInputInitResponse, error)
	// Establish a connection to the upstream service. Connect will always be
	// called first when a reader is instantiated, and will be continuously
	// called with back off until a nil error is returned.
	//
	// The provided context remains open only for the duration of the connecting
	// phase, and should not be used to establish the lifetime of the connection
	// itself.
	//
	// Once Connect returns a nil error the Read method will be called until
	// either ErrNotConnected is returned, or the reader is closed.
	Connect(context.Context, *BatchInputConnectRequest) (*BatchInputConnectResponse, error)
	// Read a message batch from a source, along with a function to be called
	// once the entire batch can be either acked (successfully sent or
	// intentionally filtered) or nacked (failed to be processed or dispatched
	// to the output).
	//
	// The Ack will be called for every message batch at least once, but
	// there are no guarantees as to when this will occur. If your input
	// implementation doesn't have a specific mechanism for dealing with a nack
	// then you can instruct the Connect framework to auto_replay_nacks in the
	// InitResponse to get automatic retries.
	//
	// If this method returns Error.NotConnected then ReadBatch will not be called
	// again until Connect has returned a nil error. If Error.EndOfInput is
	// returned then Read will no longer be called and the pipeline will
	// gracefully terminate.
	ReadBatch(context.Context, *BatchInputReadRequest) (*BatchInputReadResponse, error)
	// Acknowledge a message batch. This function ensures that the source of the
	// message receives either an acknowledgement (error is missing) or an error that
	// can either be propagated upstream as a nack, or trigger a reattempt at
	// delivering the same message.
	//
	// If your input implementation doesn't have a specific mechanism for dealing with
	// a nack then you can wrap your input implementation with AutoRetryNacks to get
	// automatic retries, and noop this function.
	Ack(context.Context, *BatchInputAckRequest) (*BatchInputAckResponse, error)
	// Close the component, blocks until either the underlying resources are
	// cleaned up or the context is cancelled. Returns an error if the context
	// is cancelled.
	Close(context.Context, *BatchInputCloseRequest) (*BatchInputCloseResponse, error)
	mustEmbedUnimplementedBatchInputServiceServer()
}

// UnimplementedBatchInputServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBatchInputServiceServer struct{}

func (UnimplementedBatchInputServiceServer) Init(context.Context, *BatchInputInitRequest) (*BatchInputInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedBatchInputServiceServer) Connect(context.Context, *BatchInputConnectRequest) (*BatchInputConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedBatchInputServiceServer) ReadBatch(context.Context, *BatchInputReadRequest) (*BatchInputReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBatch not implemented")
}
func (UnimplementedBatchInputServiceServer) Ack(context.Context, *BatchInputAckRequest) (*BatchInputAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedBatchInputServiceServer) Close(context.Context, *BatchInputCloseRequest) (*BatchInputCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedBatchInputServiceServer) mustEmbedUnimplementedBatchInputServiceServer() {}
func (UnimplementedBatchInputServiceServer) testEmbeddedByValue()                           {}

// UnsafeBatchInputServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchInputServiceServer will
// result in compilation errors.
type UnsafeBatchInputServiceServer interface {
	mustEmbedUnimplementedBatchInputServiceServer()
}

func RegisterBatchInputServiceServer(s grpc.ServiceRegistrar, srv BatchInputServiceServer) {
	// If the following call pancis, it indicates UnimplementedBatchInputServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BatchInputService_ServiceDesc, srv)
}

func _BatchInputService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInputInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchInputServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchInputService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchInputServiceServer).Init(ctx, req.(*BatchInputInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchInputService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInputConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchInputServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchInputService_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchInputServiceServer).Connect(ctx, req.(*BatchInputConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchInputService_ReadBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInputReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchInputServiceServer).ReadBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchInputService_ReadBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchInputServiceServer).ReadBatch(ctx, req.(*BatchInputReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchInputService_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInputAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchInputServiceServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchInputService_Ack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchInputServiceServer).Ack(ctx, req.(*BatchInputAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchInputService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInputCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchInputServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchInputService_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchInputServiceServer).Close(ctx, req.(*BatchInputCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BatchInputService_ServiceDesc is the grpc.ServiceDesc for BatchInputService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchInputService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.runtime.v1alpha1.BatchInputService",
	HandlerType: (*BatchInputServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _BatchInputService_Init_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _BatchInputService_Connect_Handler,
		},
		{
			MethodName: "ReadBatch",
			Handler:    _BatchInputService_ReadBatch_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _BatchInputService_Ack_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _BatchInputService_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/runtime/v1alpha1/input.proto",
}
