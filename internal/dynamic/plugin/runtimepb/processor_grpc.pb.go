// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: redpanda/runtime/v1alpha1/processor.proto

package runtimepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BatchProcessorService_Init_FullMethodName         = "/redpanda.runtime.v1alpha1.BatchProcessorService/Init"
	BatchProcessorService_ProcessBatch_FullMethodName = "/redpanda.runtime.v1alpha1.BatchProcessorService/ProcessBatch"
	BatchProcessorService_Close_FullMethodName        = "/redpanda.runtime.v1alpha1.BatchProcessorService/Close"
)

// BatchProcessorServiceClient is the client API for BatchProcessorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BatchProcessor is a Benthos processor implementation that works against batches
// of messages, which allows windowed processing.
//
// Message batches must be created by upstream components (inputs, buffers, etc)
// otherwise this processor will simply receive batches containing single messages.
type BatchProcessorServiceClient interface {
	// Init is the first method called for a batch processor and it passes the user's
	// configuration to the input.
	//
	// The schema for the processor configuration is specified in the `plugin.yaml` file
	// provided to Redpanda Connect.
	Init(ctx context.Context, in *BatchProcessorInitRequest, opts ...grpc.CallOption) (*BatchProcessorInitResponse, error)
	// Process a batch of messages into one or more resulting batches, or return
	// an error if the entire batch could not be processed. If zero messages are
	// returned and the error is nil then all messages are filtered.
	//
	// The provided MessageBatch should NOT be modified, in order to return a
	// mutated batch a copy of the slice should be created instead.
	//
	// When an error is returned all of the input messages will continue down
	// the pipeline but will be marked with the error with *message.SetError,
	// and metrics and logs will be emitted.
	//
	// In order to add errors to individual messages of the batch for downstream
	// handling use message.SetError(err) and return it in the resulting batch
	// with a nil error.
	//
	// The Message types returned MUST be derived from the provided messages,
	// and CANNOT be custom instantiations of Message. In order to copy the
	// provided messages use the Copy method.
	ProcessBatch(ctx context.Context, in *BatchProcessorProcessBatchRequest, opts ...grpc.CallOption) (*BatchProcessorProcessBatchResponse, error)
	// Close the component, blocks until either the underlying resources are
	// cleaned up or the context is cancelled. Returns an error if the context
	// is cancelled.
	Close(ctx context.Context, in *BatchProcessorCloseRequest, opts ...grpc.CallOption) (*BatchProcessorCloseResponse, error)
}

type batchProcessorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchProcessorServiceClient(cc grpc.ClientConnInterface) BatchProcessorServiceClient {
	return &batchProcessorServiceClient{cc}
}

func (c *batchProcessorServiceClient) Init(ctx context.Context, in *BatchProcessorInitRequest, opts ...grpc.CallOption) (*BatchProcessorInitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchProcessorInitResponse)
	err := c.cc.Invoke(ctx, BatchProcessorService_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchProcessorServiceClient) ProcessBatch(ctx context.Context, in *BatchProcessorProcessBatchRequest, opts ...grpc.CallOption) (*BatchProcessorProcessBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchProcessorProcessBatchResponse)
	err := c.cc.Invoke(ctx, BatchProcessorService_ProcessBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchProcessorServiceClient) Close(ctx context.Context, in *BatchProcessorCloseRequest, opts ...grpc.CallOption) (*BatchProcessorCloseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchProcessorCloseResponse)
	err := c.cc.Invoke(ctx, BatchProcessorService_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchProcessorServiceServer is the server API for BatchProcessorService service.
// All implementations must embed UnimplementedBatchProcessorServiceServer
// for forward compatibility.
//
// BatchProcessor is a Benthos processor implementation that works against batches
// of messages, which allows windowed processing.
//
// Message batches must be created by upstream components (inputs, buffers, etc)
// otherwise this processor will simply receive batches containing single messages.
type BatchProcessorServiceServer interface {
	// Init is the first method called for a batch processor and it passes the user's
	// configuration to the input.
	//
	// The schema for the processor configuration is specified in the `plugin.yaml` file
	// provided to Redpanda Connect.
	Init(context.Context, *BatchProcessorInitRequest) (*BatchProcessorInitResponse, error)
	// Process a batch of messages into one or more resulting batches, or return
	// an error if the entire batch could not be processed. If zero messages are
	// returned and the error is nil then all messages are filtered.
	//
	// The provided MessageBatch should NOT be modified, in order to return a
	// mutated batch a copy of the slice should be created instead.
	//
	// When an error is returned all of the input messages will continue down
	// the pipeline but will be marked with the error with *message.SetError,
	// and metrics and logs will be emitted.
	//
	// In order to add errors to individual messages of the batch for downstream
	// handling use message.SetError(err) and return it in the resulting batch
	// with a nil error.
	//
	// The Message types returned MUST be derived from the provided messages,
	// and CANNOT be custom instantiations of Message. In order to copy the
	// provided messages use the Copy method.
	ProcessBatch(context.Context, *BatchProcessorProcessBatchRequest) (*BatchProcessorProcessBatchResponse, error)
	// Close the component, blocks until either the underlying resources are
	// cleaned up or the context is cancelled. Returns an error if the context
	// is cancelled.
	Close(context.Context, *BatchProcessorCloseRequest) (*BatchProcessorCloseResponse, error)
	mustEmbedUnimplementedBatchProcessorServiceServer()
}

// UnimplementedBatchProcessorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBatchProcessorServiceServer struct{}

func (UnimplementedBatchProcessorServiceServer) Init(context.Context, *BatchProcessorInitRequest) (*BatchProcessorInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedBatchProcessorServiceServer) ProcessBatch(context.Context, *BatchProcessorProcessBatchRequest) (*BatchProcessorProcessBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessBatch not implemented")
}
func (UnimplementedBatchProcessorServiceServer) Close(context.Context, *BatchProcessorCloseRequest) (*BatchProcessorCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedBatchProcessorServiceServer) mustEmbedUnimplementedBatchProcessorServiceServer() {}
func (UnimplementedBatchProcessorServiceServer) testEmbeddedByValue()                               {}

// UnsafeBatchProcessorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchProcessorServiceServer will
// result in compilation errors.
type UnsafeBatchProcessorServiceServer interface {
	mustEmbedUnimplementedBatchProcessorServiceServer()
}

func RegisterBatchProcessorServiceServer(s grpc.ServiceRegistrar, srv BatchProcessorServiceServer) {
	// If the following call pancis, it indicates UnimplementedBatchProcessorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BatchProcessorService_ServiceDesc, srv)
}

func _BatchProcessorService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProcessorInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchProcessorServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchProcessorService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchProcessorServiceServer).Init(ctx, req.(*BatchProcessorInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchProcessorService_ProcessBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProcessorProcessBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchProcessorServiceServer).ProcessBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchProcessorService_ProcessBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchProcessorServiceServer).ProcessBatch(ctx, req.(*BatchProcessorProcessBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchProcessorService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProcessorCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchProcessorServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchProcessorService_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchProcessorServiceServer).Close(ctx, req.(*BatchProcessorCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BatchProcessorService_ServiceDesc is the grpc.ServiceDesc for BatchProcessorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchProcessorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.runtime.v1alpha1.BatchProcessorService",
	HandlerType: (*BatchProcessorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _BatchProcessorService_Init_Handler,
		},
		{
			MethodName: "ProcessBatch",
			Handler:    _BatchProcessorService_ProcessBatch_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _BatchProcessorService_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/runtime/v1alpha1/processor.proto",
}
